def N(i, ksi, eta, ap):
    if ap == 1:
        functions = [
            (1 - ksi) * (1 - eta) / 4,
            (1 + ksi) * (1 - eta) / 4,
            (1 + ksi) * (1 + eta) / 4,
            (1 - ksi) * (1 + eta) / 4
        ]
    elif ap == 2:
        functions = [
            (1 / 4) * (1 - ksi) * (1 - eta) * ksi * eta,
            (1 / 4) * (ksi + 1) * (1 - eta) * ksi * (- eta),
            (1 / 4) * (ksi + 1) * (eta + 1) * ksi * eta,
            (1 / 4) * (1 - ksi) * (eta + 1) * (- ksi) * eta,
            (1 / 2) * (1 - ksi ** 2) * (- eta) * (1 - eta),
            (1 / 2) * (1 - eta ** 2) * ksi * (ksi + 1),
            (1 / 2) * (1 - ksi ** 2) * eta * (eta + 1),
            (1 / 2) * (1 - eta ** 2) * (- ksi) * (1 - ksi),
            (1 - ksi ** 2) * (1 - eta ** 2)
        ]
    elif ap == 3:
        functions = [
            (81 / 256) * (1 - ksi) * (1 - eta) * ((1 / 9) - ksi ** 2) * ((1 / 9) - eta ** 2),
            (81 / 256) * (1 + ksi) * (1 - eta) * ((1 / 9) - ksi ** 2) * ((1 / 9) - eta ** 2),
            (81 / 256) * (1 + ksi) * (1 + eta) * ((1 / 9) - ksi ** 2) * ((1 / 9) - eta ** 2),
            (81 / 256) * (1 - ksi) * (1 + eta) * ((1 / 9) - ksi ** 2) * ((1 / 9) - eta ** 2),

            (243 / 256) * (1 - ksi ** 2) * (eta ** 2 - (1 / 9)) * ((1 / 3) - ksi) * (1 - eta),
            (243 / 256) * (1 - eta ** 2) * (ksi ** 2 - (1 / 9)) * ((1 / 3) - eta) * (1 + ksi),
            (243 / 256) * (1 - ksi ** 2) * (eta ** 2 - (1 / 9)) * ((1 / 3) + ksi) * (1 + eta),
            (243 / 256) * (1 - eta ** 2) * (ksi ** 2 - (1 / 9)) * ((1 / 3) + eta) * (1 - ksi),
            (243 / 256) * (1 - ksi ** 2) * (eta ** 2 - (1 / 9)) * ((1 / 3) + ksi) * (1 - eta),
            (243 / 256) * (1 - eta ** 2) * (ksi ** 2 - (1 / 9)) * ((1 / 3) + eta) * (1 + ksi),
            (243 / 256) * (1 - ksi ** 2) * (eta ** 2 - (1 / 9)) * ((1 / 3) - ksi) * (1 + eta),
            (243 / 256) * (1 - eta ** 2) * (ksi ** 2 - (1 / 9)) * ((1 / 3) - eta) * (1 - ksi),

            # (81 / 256) * (1 - ksi ** 2) * (1 - 3 * ksi) * (1 - eta ** 2) * (1 - 3 * eta),
            # (81 / 256) * (1 - ksi ** 2) * (1 + 3 * ksi) * (1 - eta ** 2) * (1 - 3 * eta),
            # (81 / 256) * (1 - ksi ** 2) * (1 + 3 * ksi) * (1 - eta ** 2) * (1 + 3 * eta),
            # (81 / 256) * (1 - ksi ** 2) * (1 - 3 * ksi) * (1 - eta ** 2) * (1 + 3 * eta)
            (729 / 256) * (1 - ksi ** 2) * (1 / 3 - ksi) * (1 - eta ** 2) * (1 / 3 - eta),
            (729 / 256) * (1 - ksi ** 2) * (1 / 3 + ksi) * (1 - eta ** 2) * (1 / 3 - eta),
            (729 / 256) * (1 - ksi ** 2) * (1 / 3 + ksi) * (1 - eta ** 2) * (1 / 3 + eta),
            (729 / 256) * (1 - ksi ** 2) * (1 / 3 - ksi) * (1 - eta ** 2) * (1 / 3 + eta)

        ]

    return functions[i]
